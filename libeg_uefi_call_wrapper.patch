Description: Wrap EFI API calls with refit_callX_wrapper()
 Mandatory for GNU EFI especially on x86_64.
Author: Julien BLACHE <jblache@debian.org>

Index: refit-0.14/libeg/image.c
===================================================================
--- refit-0.14.orig/libeg/image.c	2010-04-21 17:17:45.197289081 +0200
+++ refit-0.14/libeg/image.c	2010-04-21 17:54:04.778634048 +0200
@@ -35,6 +35,7 @@
  */
 
 #include "libegint.h"
+#include "refit_call_wrapper.h"
 
 #define MAX_FILE_SIZE (1024*1024*1024)
 
@@ -108,13 +109,13 @@
     UINTN               BufferSize;
     UINT8               *Buffer;
     
-    Status = BaseDir->Open(BaseDir, &FileHandle, FileName, EFI_FILE_MODE_READ, 0);
+    Status = refit_call5_wrapper(BaseDir->Open, BaseDir, &FileHandle, FileName, EFI_FILE_MODE_READ, 0);
     if (EFI_ERROR(Status))
         return Status;
     
     FileInfo = LibFileInfo(FileHandle);
     if (FileInfo == NULL) {
-        FileHandle->Close(FileHandle);
+        refit_call1_wrapper(FileHandle->Close, FileHandle);
         return EFI_NOT_FOUND;
     }
     ReadSize = FileInfo->FileSize;
@@ -125,12 +126,12 @@
     BufferSize = (UINTN)ReadSize;   // was limited to 1 GB above, so this is safe
     Buffer = (UINT8 *) AllocatePool(BufferSize);
     if (Buffer == NULL) {
-        FileHandle->Close(FileHandle);
+        refit_call1_wrapper(FileHandle->Close, FileHandle);
         return EFI_OUT_OF_RESOURCES;
     }
     
-    Status = FileHandle->Read(FileHandle, &BufferSize, Buffer);
-    FileHandle->Close(FileHandle);
+    Status = refit_call3_wrapper(FileHandle->Read, FileHandle, &BufferSize, Buffer);
+    refit_call1_wrapper(FileHandle->Close, FileHandle);
     if (EFI_ERROR(Status)) {
         FreePool(Buffer);
         return Status;
@@ -172,14 +173,14 @@
             return Status;
     }
     
-    Status = BaseDir->Open(BaseDir, &FileHandle, FileName,
+    Status = refit_call5_wrapper(BaseDir->Open, BaseDir, &FileHandle, FileName,
                            EFI_FILE_MODE_READ | EFI_FILE_MODE_WRITE | EFI_FILE_MODE_CREATE, 0);
     if (EFI_ERROR(Status))
         return Status;
     
     BufferSize = FileDataLength;
-    Status = FileHandle->Write(FileHandle, &BufferSize, FileData);
-    FileHandle->Close(FileHandle);
+    Status = refit_call3_wrapper(FileHandle->Write, FileHandle, &BufferSize, FileData);
+    refit_call1_wrapper(FileHandle->Close, FileHandle);
     
     return Status;
 }
Index: refit-0.14/libeg/screen.c
===================================================================
--- refit-0.14.orig/libeg/screen.c	2010-04-21 17:17:45.206289372 +0200
+++ refit-0.14/libeg/screen.c	2010-04-21 17:54:14.843705010 +0200
@@ -35,9 +35,10 @@
  */
 
 #include "libegint.h"
+#include "refit_call_wrapper.h"
 
 #include <efiUgaDraw.h>
-#include <efiGraphicsOutput.h>
+/* #include <efiGraphicsOutput.h> */
 #include <efiConsoleControl.h>
 
 // Console defines and variables
@@ -84,7 +85,7 @@
         egScreenHeight = GraphicsOutput->Mode->Info->VerticalResolution;
         egHasGraphics = TRUE;
     } else if (UgaDraw != NULL) {
-        Status = UgaDraw->GetMode(UgaDraw, &UGAWidth, &UGAHeight, &UGADepth, &UGARefreshRate);
+        Status = refit_call5_wrapper(UgaDraw->GetMode, UgaDraw, &UGAWidth, &UGAHeight, &UGADepth, &UGARefreshRate);
         if (EFI_ERROR(Status)) {
             UgaDraw = NULL;   // graphics not available
         } else {
@@ -130,7 +131,7 @@
     EFI_CONSOLE_CONTROL_SCREEN_MODE CurrentMode;
     
     if (ConsoleControl != NULL) {
-        ConsoleControl->GetMode(ConsoleControl, &CurrentMode, NULL, NULL);
+        refit_call4_wrapper(ConsoleControl->GetMode, ConsoleControl, &CurrentMode, NULL, NULL);
         return (CurrentMode == EfiConsoleControlScreenGraphics) ? TRUE : FALSE;
     }
     
@@ -143,12 +144,12 @@
     EFI_CONSOLE_CONTROL_SCREEN_MODE NewMode;
     
     if (ConsoleControl != NULL) {
-        ConsoleControl->GetMode(ConsoleControl, &CurrentMode, NULL, NULL);
+        refit_call4_wrapper(ConsoleControl->GetMode, ConsoleControl, &CurrentMode, NULL, NULL);
         
         NewMode = Enable ? EfiConsoleControlScreenGraphics
                          : EfiConsoleControlScreenText;
         if (CurrentMode != NewMode)
-            ConsoleControl->SetMode(ConsoleControl, NewMode);
+	    refit_call2_wrapper(ConsoleControl->SetMode, ConsoleControl, NewMode);
     }
 }
 
@@ -172,10 +173,10 @@
         // EFI_GRAPHICS_OUTPUT_BLT_PIXEL and EFI_UGA_PIXEL have the same
         // layout, and the header from TianoCore actually defines them
         // to be the same type.
-        GraphicsOutput->Blt(GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)&FillColor, EfiBltVideoFill,
+        refit_call10_wrapper(GraphicsOutput->Blt, GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)&FillColor, EfiBltVideoFill,
                             0, 0, 0, 0, egScreenWidth, egScreenHeight, 0);
     } else if (UgaDraw != NULL) {
-        UgaDraw->Blt(UgaDraw, &FillColor, EfiUgaVideoFill,
+        refit_call10_wrapper(UgaDraw->Blt, UgaDraw, &FillColor, EfiUgaVideoFill,
                      0, 0, 0, 0, egScreenWidth, egScreenHeight, 0);
     }
 }
@@ -191,10 +192,10 @@
     }
     
     if (GraphicsOutput != NULL) {
-        GraphicsOutput->Blt(GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)Image->PixelData, EfiBltBufferToVideo,
+        refit_call10_wrapper(GraphicsOutput->Blt, GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)Image->PixelData, EfiBltBufferToVideo,
                             0, 0, ScreenPosX, ScreenPosY, Image->Width, Image->Height, 0);
     } else if (UgaDraw != NULL) {
-        UgaDraw->Blt(UgaDraw, (EFI_UGA_PIXEL *)Image->PixelData, EfiUgaBltBufferToVideo,
+        refit_call10_wrapper(UgaDraw->Blt, UgaDraw, (EFI_UGA_PIXEL *)Image->PixelData, EfiUgaBltBufferToVideo,
                      0, 0, ScreenPosX, ScreenPosY, Image->Width, Image->Height, 0);
     }
 }
@@ -217,10 +218,10 @@
     }
     
     if (GraphicsOutput != NULL) {
-        GraphicsOutput->Blt(GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)Image->PixelData, EfiBltBufferToVideo,
+        refit_call10_wrapper(GraphicsOutput->Blt, GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)Image->PixelData, EfiBltBufferToVideo,
                             AreaPosX, AreaPosY, ScreenPosX, ScreenPosY, AreaWidth, AreaHeight, Image->Width * 4);
     } else if (UgaDraw != NULL) {
-        UgaDraw->Blt(UgaDraw, (EFI_UGA_PIXEL *)Image->PixelData, EfiUgaBltBufferToVideo,
+        refit_call10_wrapper(UgaDraw->Blt, UgaDraw, (EFI_UGA_PIXEL *)Image->PixelData, EfiUgaBltBufferToVideo,
                      AreaPosX, AreaPosY, ScreenPosX, ScreenPosY, AreaWidth, AreaHeight, Image->Width * 4);
     }
 }
@@ -249,10 +250,10 @@
     
     // get full screen image
     if (GraphicsOutput != NULL) {
-        GraphicsOutput->Blt(GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)Image->PixelData, EfiBltVideoToBltBuffer,
+        refit_call10_wrapper(GraphicsOutput->Blt, GraphicsOutput, (EFI_GRAPHICS_OUTPUT_BLT_PIXEL *)Image->PixelData, EfiBltVideoToBltBuffer,
                             0, 0, 0, 0, Image->Width, Image->Height, 0);
     } else if (UgaDraw != NULL) {
-        UgaDraw->Blt(UgaDraw, (EFI_UGA_PIXEL *)Image->PixelData, EfiUgaVideoToBltBuffer,
+        refit_call10_wrapper(UgaDraw->Blt, UgaDraw, (EFI_UGA_PIXEL *)Image->PixelData, EfiUgaVideoToBltBuffer,
                      0, 0, 0, 0, Image->Width, Image->Height, 0);
     }
     
@@ -277,7 +278,7 @@
     // DEBUG: switch to text mode
 bailout_wait:
     egSetGraphicsModeEnabled(FALSE);
-    BS->WaitForEvent(1, &ST->ConIn->WaitForKey, &Index);
+    refit_call3_wrapper(BS->WaitForEvent, 1, &ST->ConIn->WaitForKey, &Index);
 }
 
 /* EOF */
Index: refit-0.14/libeg/Makefile
===================================================================
--- refit-0.14.orig/libeg/Makefile	2010-04-21 17:56:13.077289365 +0200
+++ refit-0.14/libeg/Makefile	2010-04-21 17:56:11.994733579 +0200
@@ -7,7 +7,7 @@
 
 VPATH = $(SRCDIR)
 
-LOCAL_CPPFLAGS  = -I$(SRCDIR)
+LOCAL_CPPFLAGS  = -I$(SRCDIR) -I$(SRCDIR)/../include
 
 OBJS            = screen.o image.o text.o load_bmp.o load_icns.o
 TARGET          = libeg.a
